import json

from disnake import Member, Embed, Color, File
from os import remove, listdir, rmdir
from numpy import arange
from random import choice
from colorama import Fore


async def var_test(variable: vars) -> None:
    """
    def –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    :param variable: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    :return: None
    """
    print(f"{Fore.CYAN}var type: {type(variable)}\n{variable = }{Fore.RESET}")


def read_json(path: str) -> dict:
    """
    –ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
    :param path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :return: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
    """
    with open(path, 'r') as json_file:
        return json.load(json_file)


async def async_read_json(path: str) -> dict:
    """
    –ß—Ç–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ (async)
    :param path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :return: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
    """
    with open(path, 'r') as json_file:
        return json.load(json_file)


async def write_json(path: str, data: dict) -> None:
    """
    –ó–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
    :param path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :param data: –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã
    :return: None
    """
    with open(path, 'w') as json_file:
        json.dump(data, json_file, indent=4, ensure_ascii=False)


async def string_to_list(string: str) -> list:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ "123456789,FFFFFFFFF,AAAAAAAAA," –≤ —Å–ø–∏—Å–æ–∫ ['23456789', 'FFFFFFFFF', 'AAAAAAAAA'].
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Å–ø–∏—Å–∫–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param string: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: –°–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–∞–µ–º—ã–π –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è `string`
    """
    list_ = []
    result = ""
    for symbol in string:
        if symbol == ",":
            list_.append(result.replace(result[0], ""))
            result = ""
        result += symbol

    return list_


async def calc_percentage(promo_code: str, price: int) -> int | None:
    """
    –ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º % —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    :param promo_code: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    :param price: —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏
    :return: —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–∫–∞–∑ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    from main import SSBot

    promo_codes_json = await async_read_json(path=SSBot.PATH_TO_PROMO_CODES_DATA)
    len_promo_code = len(promo_code)

    if len_promo_code == 10:
        return price - (price * promo_codes_json["common_code"][promo_code]["discount_rate"] / 100)
    elif len_promo_code == 17:
        return price - (price * promo_codes_json["youtube_code"][promo_code]["discount_rate"] / 100)
    else:
        return print(f"{Fore.RED}[ERR]{Fore.RESET} Error in calc_percentage def")


async def get_promocode_type(promocode_name: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
    :param promocode_name: –∏–º—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    :return: —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    len_pmn = len(promocode_name)
    type_ = None

    if len_pmn == 10:
        type_ = "common_code"
    elif len_pmn == 15:
        type_ = "service_code"
    elif len_pmn == 17:
        type_ = "youtube_code"

    return type_


async def generate_random_combination(length: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–∫–∞–∑–∞
    :param length: –¥–ª–∏–Ω–Ω–∞ ID
    :return: ID –∑–∞–∫–∞–∑–∞
    """
    from main import SSBot

    return ''.join(choice(SSBot.ORDER_ID_SYMBOLS) for _ in arange(length))


async def color_order(service: str) -> Color:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–µ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏ Embed
    :param service: –∑–∞–∫–∞–∑—ã–≤–∞–µ–º–∞—è —É—Å–ª—É–≥–∞
    :return: —Ü–≤–µ—Ç –¥–ª—è embed
    """
    from main import SSBot

    if service in (SSBot.SKIN64, SSBot.SKIN128, SSBot.SKIN_4D):
        return Color.blue()
    elif service in (SSBot.MODEL, SSBot.ANIM_MODEL, SSBot.ANIM_TEXTURE_MODEL, SSBot.TEXTURE_MODEL):
        return Color.brand_red()
    elif service in (SSBot.CAPE, SSBot.TOTEM, SSBot.TOTEM_3D, SSBot.TEXTURE):
        return Color.orange()
    elif service in (SSBot.LETTER_LOGO, SSBot.LETTER_LOGO_2):
        return Color.blurple()
    elif service in (SSBot.CHARACTERS_DESIGN):
        return Color.dark_orange()
    elif service in (SSBot.WORLD_GENERATION, SSBot.JIGSAW_STRUCTURE):
        return Color.magenta()
    else:
        return Color.default()


async def color_archive_request(type: str) -> Color:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–µ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏ Embed
    :param type: —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    :return: —Ü–≤–µ—Ç –¥–ª—è embed
    """
    if type == "–ø–æ–∫—É–ø–∫–∞":
        return Color.blue()
    elif type == "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ":
        return Color.green()
    else:
        return Color.default()


async def get_files_disnake(path: str) -> list:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
    :param path: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    :return: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
    """
    picture_for_send = []
    for image_for_send in listdir(path):
        picture_for_send.append(File(path+f"{image_for_send}"))

    return picture_for_send


async def get_files(path: str) -> list:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
    :param path: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    :return: —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
    """
    picture_for_send = []
    for image_for_send in listdir(path):
        picture_for_send.append(path+f"{image_for_send}")

    return picture_for_send


async def get_avatar(ctx_user_avatar: Member.avatar) -> Member.avatar or None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param ctx_user_avatar: –∞–≤–∞—Ç–∞—Ä —é–∑–µ—Ä–∞
    :return: –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ª–∏–±–æ None, –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ—Ç
    """
    if not ctx_user_avatar:
        avatar = None
    else:
        avatar = ctx_user_avatar.url

    return avatar


async def star_count_conv(count: int) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ –≤ —ç–º–æ–¥–∑–∏ –∑–≤—ë–∑–¥—ã
    :param count: –∫–æ–ª-–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –≤ –∏—Ç–æ–≥–µ
    :return: —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∑–≤–µ–∑–¥—ã
    """
    return "üåü"*count


def create_embed(title: str, color: Color, content: str) -> Embed:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Embed –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ Embed
    :param color: –¶–≤–µ—Ç –ø–æ–ª–æ—Å–∫–∏ Embed
    :param content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Embed (256 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å.)
    :return: Embed
    """
    embed = Embed(title=title, color=color)
    embed.add_field(name=content, value="")

    return embed


async def delete_files_from_cache(author_name) -> None:
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–µ—à-–ø–∞–ø–∫–∏ —é–∑–µ—Ä–∞
    :param author_name: name –∞–≤—Ç–æ—Ä–∞
    :return: None
    """
    for file in listdir(f"cache/{author_name}/"):
        remove(f"cache/{author_name}/{file}")
    rmdir(f"cache/{author_name}")


async def convert_value_to_service_name(value: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.
    –ü—Ä–∏–º–µ—Ä: skin64 ==> –°–∫–∏–Ω 64—Ö64.
    :param value: –ö–ª—é—á –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è.
    :return: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    """
    from main import SSBot

    match value:
        case "skin64":
            return SSBot.SKIN64
        case "skin128":
            return SSBot.SKIN128
        case "skin4d":
            return SSBot.SKIN_4D
        case "cape":
            return SSBot.CAPE
        case "totem":
            return SSBot.TOTEM
        case "texture":
            return SSBot.TEXTURE
        case "letter_logo":
            return SSBot.LETTER_LOGO
        case "letter_logo_2":
            return SSBot.LETTER_LOGO_2
        case "anim_letter_logo":
            return SSBot.ANIM_LETTER_LOGO
        case "world_generation":
            return SSBot.WORLD_GENERATION
        case "blender_render":
            return SSBot.BLENDER_RENDER
        case "characters_design":
            return SSBot.CHARACTERS_DESIGN
        case "model":
            return SSBot.MODEL
        case "texture_model":
            return SSBot.TEXTURE_MODEL
        case "anim_model":
            return SSBot.ANIM_MODEL
        case "anim_texture_model":
            return SSBot.ANIM_TEXTURE_MODEL
        case "structure":
            return SSBot.STRUCTURE
        case "jigsaw_structure":
            return SSBot.JIGSAW_STRUCTURE


